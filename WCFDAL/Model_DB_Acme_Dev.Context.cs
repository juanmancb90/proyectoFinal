

//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


namespace WCFDAL
{

using System;
using System.Data.Entity;
using System.Data.Entity.Infrastructure;

using System.Data.Objects;
using System.Data.Objects.DataClasses;
using System.Linq;


public partial class DB_Acme_DevEntities : DbContext
{
    public DB_Acme_DevEntities()
        : base("name=DB_Acme_DevEntities")
    {

    }

    protected override void OnModelCreating(DbModelBuilder modelBuilder)
    {
        throw new UnintentionalCodeFirstException();
    }


    public DbSet<TB_Auditoria> TB_Auditoria { get; set; }

    public DbSet<TB_Categoria> TB_Categoria { get; set; }

    public DbSet<TB_Ciudad> TB_Ciudad { get; set; }

    public DbSet<TB_Cliente> TB_Cliente { get; set; }

    public DbSet<TB_DetallePedido> TB_DetallePedido { get; set; }

    public DbSet<TB_Documento> TB_Documento { get; set; }

    public DbSet<TB_Pedido> TB_Pedido { get; set; }

    public DbSet<TB_Perfil> TB_Perfil { get; set; }

    public DbSet<TB_Producto> TB_Producto { get; set; }

    public DbSet<TB_Promocion> TB_Promocion { get; set; }

    public DbSet<TB_Usuario> TB_Usuario { get; set; }


    public virtual int ActualizarStockProducto(Nullable<int> iD_Producto, Nullable<int> cantidad)
    {

        var iD_ProductoParameter = iD_Producto.HasValue ?
            new ObjectParameter("ID_Producto", iD_Producto) :
            new ObjectParameter("ID_Producto", typeof(int));


        var cantidadParameter = cantidad.HasValue ?
            new ObjectParameter("Cantidad", cantidad) :
            new ObjectParameter("Cantidad", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ActualizarStockProducto", iD_ProductoParameter, cantidadParameter);
    }


    public virtual int AutenticarUsuario(string nombreUsuario, string contrasenia, ObjectParameter resultado)
    {

        var nombreUsuarioParameter = nombreUsuario != null ?
            new ObjectParameter("NombreUsuario", nombreUsuario) :
            new ObjectParameter("NombreUsuario", typeof(string));


        var contraseniaParameter = contrasenia != null ?
            new ObjectParameter("Contrasenia", contrasenia) :
            new ObjectParameter("Contrasenia", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AutenticarUsuario", nombreUsuarioParameter, contraseniaParameter, resultado);
    }


    public virtual int ConsultarIdentificadorPedido(ObjectParameter iD_Pedido)
    {

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ConsultarIdentificadorPedido", iD_Pedido);
    }


    public virtual int InsertarDetallePedido(Nullable<int> iD_Pedido, Nullable<int> iD_Producto, Nullable<int> cantidad)
    {

        var iD_PedidoParameter = iD_Pedido.HasValue ?
            new ObjectParameter("ID_Pedido", iD_Pedido) :
            new ObjectParameter("ID_Pedido", typeof(int));


        var iD_ProductoParameter = iD_Producto.HasValue ?
            new ObjectParameter("ID_Producto", iD_Producto) :
            new ObjectParameter("ID_Producto", typeof(int));


        var cantidadParameter = cantidad.HasValue ?
            new ObjectParameter("Cantidad", cantidad) :
            new ObjectParameter("Cantidad", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertarDetallePedido", iD_PedidoParameter, iD_ProductoParameter, cantidadParameter);
    }


    public virtual int InsertarPedido(Nullable<int> iD_Cliente, Nullable<System.DateTime> fechaRegistro, Nullable<decimal> totalBruto, Nullable<decimal> impuesto, Nullable<decimal> valorNeto)
    {

        var iD_ClienteParameter = iD_Cliente.HasValue ?
            new ObjectParameter("ID_Cliente", iD_Cliente) :
            new ObjectParameter("ID_Cliente", typeof(int));


        var fechaRegistroParameter = fechaRegistro.HasValue ?
            new ObjectParameter("FechaRegistro", fechaRegistro) :
            new ObjectParameter("FechaRegistro", typeof(System.DateTime));


        var totalBrutoParameter = totalBruto.HasValue ?
            new ObjectParameter("TotalBruto", totalBruto) :
            new ObjectParameter("TotalBruto", typeof(decimal));


        var impuestoParameter = impuesto.HasValue ?
            new ObjectParameter("Impuesto", impuesto) :
            new ObjectParameter("Impuesto", typeof(decimal));


        var valorNetoParameter = valorNeto.HasValue ?
            new ObjectParameter("ValorNeto", valorNeto) :
            new ObjectParameter("ValorNeto", typeof(decimal));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertarPedido", iD_ClienteParameter, fechaRegistroParameter, totalBrutoParameter, impuestoParameter, valorNetoParameter);
    }


    public virtual int InsertarUsuario(string nombreCompleto, string numeroDocumento, string nombreUsuario, string contrasenia)
    {

        var nombreCompletoParameter = nombreCompleto != null ?
            new ObjectParameter("NombreCompleto", nombreCompleto) :
            new ObjectParameter("NombreCompleto", typeof(string));


        var numeroDocumentoParameter = numeroDocumento != null ?
            new ObjectParameter("NumeroDocumento", numeroDocumento) :
            new ObjectParameter("NumeroDocumento", typeof(string));


        var nombreUsuarioParameter = nombreUsuario != null ?
            new ObjectParameter("NombreUsuario", nombreUsuario) :
            new ObjectParameter("NombreUsuario", typeof(string));


        var contraseniaParameter = contrasenia != null ?
            new ObjectParameter("Contrasenia", contrasenia) :
            new ObjectParameter("Contrasenia", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertarUsuario", nombreCompletoParameter, numeroDocumentoParameter, nombreUsuarioParameter, contraseniaParameter);
    }


    public virtual int ActualizarDetallePedido(Nullable<int> iD_DetallePedido, Nullable<int> iD_Pedido, Nullable<int> iD_Producto, string codigo, string nombreProduto, string descripcion, Nullable<int> cantidad, Nullable<decimal> valorUnitario, Nullable<decimal> impuesto, Nullable<decimal> subTotal)
    {

        var iD_DetallePedidoParameter = iD_DetallePedido.HasValue ?
            new ObjectParameter("ID_DetallePedido", iD_DetallePedido) :
            new ObjectParameter("ID_DetallePedido", typeof(int));


        var iD_PedidoParameter = iD_Pedido.HasValue ?
            new ObjectParameter("ID_Pedido", iD_Pedido) :
            new ObjectParameter("ID_Pedido", typeof(int));


        var iD_ProductoParameter = iD_Producto.HasValue ?
            new ObjectParameter("ID_Producto", iD_Producto) :
            new ObjectParameter("ID_Producto", typeof(int));


        var codigoParameter = codigo != null ?
            new ObjectParameter("Codigo", codigo) :
            new ObjectParameter("Codigo", typeof(string));


        var nombreProdutoParameter = nombreProduto != null ?
            new ObjectParameter("NombreProduto", nombreProduto) :
            new ObjectParameter("NombreProduto", typeof(string));


        var descripcionParameter = descripcion != null ?
            new ObjectParameter("Descripcion", descripcion) :
            new ObjectParameter("Descripcion", typeof(string));


        var cantidadParameter = cantidad.HasValue ?
            new ObjectParameter("Cantidad", cantidad) :
            new ObjectParameter("Cantidad", typeof(int));


        var valorUnitarioParameter = valorUnitario.HasValue ?
            new ObjectParameter("ValorUnitario", valorUnitario) :
            new ObjectParameter("ValorUnitario", typeof(decimal));


        var impuestoParameter = impuesto.HasValue ?
            new ObjectParameter("Impuesto", impuesto) :
            new ObjectParameter("Impuesto", typeof(decimal));


        var subTotalParameter = subTotal.HasValue ?
            new ObjectParameter("SubTotal", subTotal) :
            new ObjectParameter("SubTotal", typeof(decimal));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ActualizarDetallePedido", iD_DetallePedidoParameter, iD_PedidoParameter, iD_ProductoParameter, codigoParameter, nombreProdutoParameter, descripcionParameter, cantidadParameter, valorUnitarioParameter, impuestoParameter, subTotalParameter);
    }


    public virtual int ActualizarPedido(Nullable<int> iD_Pedido, Nullable<int> iD_Cliente, Nullable<System.DateTime> fechaRegistro, Nullable<decimal> totalBruto, Nullable<decimal> impuestos, Nullable<decimal> valorNeto, Nullable<bool> estado)
    {

        var iD_PedidoParameter = iD_Pedido.HasValue ?
            new ObjectParameter("ID_Pedido", iD_Pedido) :
            new ObjectParameter("ID_Pedido", typeof(int));


        var iD_ClienteParameter = iD_Cliente.HasValue ?
            new ObjectParameter("ID_Cliente", iD_Cliente) :
            new ObjectParameter("ID_Cliente", typeof(int));


        var fechaRegistroParameter = fechaRegistro.HasValue ?
            new ObjectParameter("FechaRegistro", fechaRegistro) :
            new ObjectParameter("FechaRegistro", typeof(System.DateTime));


        var totalBrutoParameter = totalBruto.HasValue ?
            new ObjectParameter("TotalBruto", totalBruto) :
            new ObjectParameter("TotalBruto", typeof(decimal));


        var impuestosParameter = impuestos.HasValue ?
            new ObjectParameter("Impuestos", impuestos) :
            new ObjectParameter("Impuestos", typeof(decimal));


        var valorNetoParameter = valorNeto.HasValue ?
            new ObjectParameter("ValorNeto", valorNeto) :
            new ObjectParameter("ValorNeto", typeof(decimal));


        var estadoParameter = estado.HasValue ?
            new ObjectParameter("Estado", estado) :
            new ObjectParameter("Estado", typeof(bool));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ActualizarPedido", iD_PedidoParameter, iD_ClienteParameter, fechaRegistroParameter, totalBrutoParameter, impuestosParameter, valorNetoParameter, estadoParameter);
    }


    public virtual int InsertarDetallePedidoOffline(Nullable<int> iD_Pedido, Nullable<int> iD_Producto, Nullable<int> cantidad)
    {

        var iD_PedidoParameter = iD_Pedido.HasValue ?
            new ObjectParameter("ID_Pedido", iD_Pedido) :
            new ObjectParameter("ID_Pedido", typeof(int));


        var iD_ProductoParameter = iD_Producto.HasValue ?
            new ObjectParameter("ID_Producto", iD_Producto) :
            new ObjectParameter("ID_Producto", typeof(int));


        var cantidadParameter = cantidad.HasValue ?
            new ObjectParameter("Cantidad", cantidad) :
            new ObjectParameter("Cantidad", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertarDetallePedidoOffline", iD_PedidoParameter, iD_ProductoParameter, cantidadParameter);
    }


    public virtual int InsertarPedidoOffline(Nullable<int> iD_Cliente, Nullable<System.DateTime> fechaRegistro, Nullable<decimal> totalBruto, Nullable<decimal> impuesto, Nullable<decimal> valorNeto)
    {

        var iD_ClienteParameter = iD_Cliente.HasValue ?
            new ObjectParameter("ID_Cliente", iD_Cliente) :
            new ObjectParameter("ID_Cliente", typeof(int));


        var fechaRegistroParameter = fechaRegistro.HasValue ?
            new ObjectParameter("FechaRegistro", fechaRegistro) :
            new ObjectParameter("FechaRegistro", typeof(System.DateTime));


        var totalBrutoParameter = totalBruto.HasValue ?
            new ObjectParameter("TotalBruto", totalBruto) :
            new ObjectParameter("TotalBruto", typeof(decimal));


        var impuestoParameter = impuesto.HasValue ?
            new ObjectParameter("Impuesto", impuesto) :
            new ObjectParameter("Impuesto", typeof(decimal));


        var valorNetoParameter = valorNeto.HasValue ?
            new ObjectParameter("ValorNeto", valorNeto) :
            new ObjectParameter("ValorNeto", typeof(decimal));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertarPedidoOffline", iD_ClienteParameter, fechaRegistroParameter, totalBrutoParameter, impuestoParameter, valorNetoParameter);
    }


    public virtual int InsertarDetallePedido1(Nullable<int> iD_Pedido, Nullable<int> iD_Producto, Nullable<int> cantidad)
    {

        var iD_PedidoParameter = iD_Pedido.HasValue ?
            new ObjectParameter("ID_Pedido", iD_Pedido) :
            new ObjectParameter("ID_Pedido", typeof(int));


        var iD_ProductoParameter = iD_Producto.HasValue ?
            new ObjectParameter("ID_Producto", iD_Producto) :
            new ObjectParameter("ID_Producto", typeof(int));


        var cantidadParameter = cantidad.HasValue ?
            new ObjectParameter("Cantidad", cantidad) :
            new ObjectParameter("Cantidad", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertarDetallePedido1", iD_PedidoParameter, iD_ProductoParameter, cantidadParameter);
    }


    public virtual int InsertarPedido1(Nullable<int> iD_Cliente, Nullable<decimal> totalBruto, Nullable<decimal> impuesto, Nullable<decimal> valorNeto)
    {

        var iD_ClienteParameter = iD_Cliente.HasValue ?
            new ObjectParameter("ID_Cliente", iD_Cliente) :
            new ObjectParameter("ID_Cliente", typeof(int));


        var totalBrutoParameter = totalBruto.HasValue ?
            new ObjectParameter("TotalBruto", totalBruto) :
            new ObjectParameter("TotalBruto", typeof(decimal));


        var impuestoParameter = impuesto.HasValue ?
            new ObjectParameter("Impuesto", impuesto) :
            new ObjectParameter("Impuesto", typeof(decimal));


        var valorNetoParameter = valorNeto.HasValue ?
            new ObjectParameter("ValorNeto", valorNeto) :
            new ObjectParameter("ValorNeto", typeof(decimal));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertarPedido1", iD_ClienteParameter, totalBrutoParameter, impuestoParameter, valorNetoParameter);
    }


    public virtual int ActualizarCliente(ObjectParameter iD_Cliente, Nullable<int> iD_Vendedor, Nullable<int> iD_Ciudad, Nullable<int> iD_Documento, string nombreCompleto, string numeroDocumento, string telefono, string celuar, string email, string direccion)
    {

        var iD_VendedorParameter = iD_Vendedor.HasValue ?
            new ObjectParameter("ID_Vendedor", iD_Vendedor) :
            new ObjectParameter("ID_Vendedor", typeof(int));


        var iD_CiudadParameter = iD_Ciudad.HasValue ?
            new ObjectParameter("ID_Ciudad", iD_Ciudad) :
            new ObjectParameter("ID_Ciudad", typeof(int));


        var iD_DocumentoParameter = iD_Documento.HasValue ?
            new ObjectParameter("ID_Documento", iD_Documento) :
            new ObjectParameter("ID_Documento", typeof(int));


        var nombreCompletoParameter = nombreCompleto != null ?
            new ObjectParameter("NombreCompleto", nombreCompleto) :
            new ObjectParameter("NombreCompleto", typeof(string));


        var numeroDocumentoParameter = numeroDocumento != null ?
            new ObjectParameter("NumeroDocumento", numeroDocumento) :
            new ObjectParameter("NumeroDocumento", typeof(string));


        var telefonoParameter = telefono != null ?
            new ObjectParameter("Telefono", telefono) :
            new ObjectParameter("Telefono", typeof(string));


        var celuarParameter = celuar != null ?
            new ObjectParameter("Celuar", celuar) :
            new ObjectParameter("Celuar", typeof(string));


        var emailParameter = email != null ?
            new ObjectParameter("Email", email) :
            new ObjectParameter("Email", typeof(string));


        var direccionParameter = direccion != null ?
            new ObjectParameter("Direccion", direccion) :
            new ObjectParameter("Direccion", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ActualizarCliente", iD_Cliente, iD_VendedorParameter, iD_CiudadParameter, iD_DocumentoParameter, nombreCompletoParameter, numeroDocumentoParameter, telefonoParameter, celuarParameter, emailParameter, direccionParameter);
    }


    public virtual int EliminarCliente(Nullable<int> iD_Cliente)
    {

        var iD_ClienteParameter = iD_Cliente.HasValue ?
            new ObjectParameter("ID_Cliente", iD_Cliente) :
            new ObjectParameter("ID_Cliente", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EliminarCliente", iD_ClienteParameter);
    }


    public virtual int InsertarCliente(ObjectParameter iD_Cliente, Nullable<int> iD_Vendedor, Nullable<int> iD_Ciudad, Nullable<int> iD_Documento, string nombreCompleto, string numeroDocumento, string telefono, string celuar, string email, string direccion)
    {

        var iD_VendedorParameter = iD_Vendedor.HasValue ?
            new ObjectParameter("ID_Vendedor", iD_Vendedor) :
            new ObjectParameter("ID_Vendedor", typeof(int));


        var iD_CiudadParameter = iD_Ciudad.HasValue ?
            new ObjectParameter("ID_Ciudad", iD_Ciudad) :
            new ObjectParameter("ID_Ciudad", typeof(int));


        var iD_DocumentoParameter = iD_Documento.HasValue ?
            new ObjectParameter("ID_Documento", iD_Documento) :
            new ObjectParameter("ID_Documento", typeof(int));


        var nombreCompletoParameter = nombreCompleto != null ?
            new ObjectParameter("NombreCompleto", nombreCompleto) :
            new ObjectParameter("NombreCompleto", typeof(string));


        var numeroDocumentoParameter = numeroDocumento != null ?
            new ObjectParameter("NumeroDocumento", numeroDocumento) :
            new ObjectParameter("NumeroDocumento", typeof(string));


        var telefonoParameter = telefono != null ?
            new ObjectParameter("Telefono", telefono) :
            new ObjectParameter("Telefono", typeof(string));


        var celuarParameter = celuar != null ?
            new ObjectParameter("Celuar", celuar) :
            new ObjectParameter("Celuar", typeof(string));


        var emailParameter = email != null ?
            new ObjectParameter("Email", email) :
            new ObjectParameter("Email", typeof(string));


        var direccionParameter = direccion != null ?
            new ObjectParameter("Direccion", direccion) :
            new ObjectParameter("Direccion", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertarCliente", iD_Cliente, iD_VendedorParameter, iD_CiudadParameter, iD_DocumentoParameter, nombreCompletoParameter, numeroDocumentoParameter, telefonoParameter, celuarParameter, emailParameter, direccionParameter);
    }

}

}

